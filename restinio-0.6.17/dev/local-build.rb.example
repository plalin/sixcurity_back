MxxRu::Cpp::composite_target do
  default_cpp_std = 'cpp14'
  cpp_std = ENV.fetch( 'RESTINIO_CPP_STD', default_cpp_std )

  if 'cpp20' == cpp_std
    toolset.force_cpp20
  elsif 'cpp17' == cpp_std
    toolset.force_cpp17
  elsif 'cpp14' == cpp_std
    toolset.force_cpp14
  else
    raise "Unsupported C++ standard: #{cpp_std}"
  end

  global_obj_placement MxxRu::Cpp::PrjAwareRuntimeSubdirObjPlacement.new(
    "target/#{cpp_std}", MxxRu::Cpp::PrjAwareRuntimeSubdirObjPlacement::USE_COMPILER_ID )
  default_runtime_mode( MxxRu::Cpp::RUNTIME_RELEASE )
  MxxRu::enable_show_brief

  if ENV.has_key?( 'FMT_ENFORCE_COMPILE_STRING' )
    global_define 'FMT_ENFORCE_COMPILE_STRING=1'
  end

#  global_define 'ASIO_USE_TS_EXECUTOR_AS_DEFAULT'

  if 'vc' == toolset.name
    global_compiler_option '/W3'
    global_define '_CRT_SECURE_NO_WARNINGS'
    global_define '_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS'
=begin
    global_compiler_option '/Zi'
    global_linker_option '/DEBUG'
    global_linker_option '/Profile'
=end
  end

  if 'gcc' == toolset.name
    global_compiler_option '-Wextra'
    global_compiler_option '-Wall'
    global_compiler_option '-Wno-noexcept-type'
    global_linker_option "-Wl,-rpath='$ORIGIN'"
  end

  if 'clang' == toolset.name
    global_linker_option "-Wl,-rpath='$ORIGIN'"

    global_compiler_option '-Weverything'
    global_compiler_option '-Wno-c++98-compat'
    global_compiler_option '-Wno-c++98-compat-pedantic'
    global_compiler_option '-Wno-padded'
    global_compiler_option '-Wno-missing-noreturn'
    global_compiler_option '-Wno-documentation-unknown-command'
    global_compiler_option '-Wno-documentation-deprecated-sync'
    global_compiler_option '-Wno-documentation'
    global_compiler_option '-Wno-weak-vtables'
    global_compiler_option '-Wno-missing-prototypes'
    global_compiler_option '-Wno-missing-variable-declarations'
    global_compiler_option '-Wno-exit-time-destructors'
    global_compiler_option '-Wno-global-constructors'
  end

end

# vim:ts=2:sw=2:expandtab
